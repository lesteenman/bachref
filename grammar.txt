This file describes the grammar for the IM. 
In each grammar segment, there are a number of elements:
 - Text between <> refers to another grammar segment.
 - A label prefixed with opt: is optional.
 - ... denote that the previous grammar item can be repeated.
 - All other text in a segment denotes that those exact characters are expected.
Note that the grammar is not indentation-sensitive, but it is newline-sensitive.

A visual representation of this grammar can also be found in the files 'Abstract Syntax Tree'.

model:
	opt: <sorts>
	<actors>

sorts:
	sorts: {
		<sort>
		...
	}

sort:
	<identifier>: <struct>

struct:
	Struct(<item>, ...)


actors:
	actors: {
		<actor>
		...
	}

actor:
	<identifier>: {
		<instances>
		opt: <states>
		opt: <actions>
		opt: <guards>
	}

instances:
	instances: {
		<instance>
		...
		OR
		<assignment>
		...
	}

instance:
	<identifier>: {
		<assignment>
		...
	}

states:
	states: {
		<state>
		...
	}

state:
	<identifier>: <type>

actions:
	actions: {
		<action>
		...
	}

action:
	<identifier>(<parameter_type> ...): {
		function_block
	}

guards:
	guards: {
		<guarded_actor>
		...
	}

guarded_actor:
	<actor>: {
		<function>
		...
	}

guarded_function:
	<function_identifier>: <function_block>

function_block:
	<ifelse>
	OR
	<function>

ifelse:
	if (<condition>) <function_block>
	opt: elseif (<condition>) <function_block>
	opt: ...
	opt: else <function_block>

condition:
	comp
	OR
	comp && condition
	OR
	comp || condition

comp:
	prop == val
	OR
	prop != val
	OR
	prop < val
	OR
	prop > val
	OR
	prop <= val
	OR
	prop >= val
	OR

function:
	-> <parameter>* {
		assignment*
	}

parameter:
	<identifier>
	OR
	Any(<Type>)
	OR
	Not(<Type>: <val>, ...)

assignment:
	<prop> = <val>

value:
	<identifier>
	OR
	"string"

state:
	<identifier>: <type>
